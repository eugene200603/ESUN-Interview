package com.esun.esuninterview.controllers.orders;

import java.math.BigDecimal;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

import com.esun.esuninterview.models.beans.orders.Order;
import com.esun.esuninterview.models.beans.orders.OrderDetail;
import com.esun.esuninterview.models.services.orders.OrderService;
import com.esun.esuninterview.models.services.products.ProductService;

@Controller

public class OrderController {
	@Autowired
	private OrderService orderService;

	@Autowired
	private ProductService productService;

	@PostMapping("/orders")
	public String createOrder(@ModelAttribute("order") Order order, HttpServletRequest request, Model model) {
		 // 取得從表單提交的商品相關資訊
	    String productId = request.getParameter("productId");
	    BigDecimal standPrice = new BigDecimal(request.getParameter("standPrice"));
	    int quantity = Integer.parseInt(request.getParameter("quantity"));

	    // 建立 OrderDetail 物件並設定商品編號、單價和數量
	    OrderDetail orderDetail = new OrderDetail();
	    orderDetail.setProduct(productService.findProductById(productId));
	    orderDetail.setStandPrice(standPrice);
	    orderDetail.setQuantity(quantity);

	    // 將 OrderDetail 加入 Order 的 OrderDetails 列表
	    order.getOrderDetails().add(orderDetail);

	    // 呼叫 OrderService 的 createOrder 方法
	    Order createdOrder = orderService.createOrder(order);
	    model.addAttribute("createdOrder", createdOrder);
	    
	 // 根據訂單的 ID，重新查詢該訂單的詳細資訊
	    Order queriedOrder = orderService.getOrderById(createdOrder.getId());
	    model.addAttribute("createdOrder", queriedOrder);
	    
	    return "orders/Order";
	   
	}

	@GetMapping("/{orderId}")
	public ResponseEntity<Order> getOrderById(@PathVariable String orderId) {
		Order order = orderService.getOrderById(orderId);
		if (order == null) {
			return ResponseEntity.notFound().build();
		}
		return ResponseEntity.ok(order);
	}

	@GetMapping("/OrderList")
	public String showAllOrders(Model model) {
	    List<Order> orders = orderService.getAllOrders();
	    model.addAttribute("orders", orders);
	    return "orders/Order"; 
	}
	

	@DeleteMapping("/{orderId}")
	public ResponseEntity<Void> deleteOrder(@PathVariable String orderId) {
		orderService.deleteOrder(orderId);
		return ResponseEntity.noContent().build();
	}
}
