package com.esun.esuninterview.controllers.orders;

import java.math.BigDecimal;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.esun.esuninterview.models.beans.member.Member;
import com.esun.esuninterview.models.beans.orders.Order;
import com.esun.esuninterview.models.beans.orders.OrderDetail;
import com.esun.esuninterview.models.beans.products.Product;
import com.esun.esuninterview.models.services.orders.OrderService;
import com.esun.esuninterview.models.services.products.ProductService;

@RestController
@RequestMapping("/orders")
public class OrderController {
    @Autowired
    private OrderService orderService;
    
    @Autowired
    private ProductService productService;

    @PostMapping
    public ResponseEntity<Order> createOrder(@PathVariable String productId, @RequestParam("standPrice") BigDecimal standPrice, @RequestParam("quantity") int quantity) {
    	// 建立 Order 物件並設定商品編號和單價
        Order order = new Order();
        OrderDetail orderDetail = new OrderDetail();
        Product product = productService.findProductById(productId);
        orderDetail.setProduct(product);
        orderDetail.setStandPrice(standPrice);
        orderDetail.setQuantity(quantity);
        order.getOrderDetails().add(orderDetail);
        
        //沒有會員系統,先暫時給一個臨時的假資料
        Member temporaryMember = new Member();
        temporaryMember.setMemberId(55688);;
        order.setMember(temporaryMember);
        
   	
        Order createdOrder = orderService.createOrder(order);
        return ResponseEntity.ok(createdOrder);
    }

    @GetMapping("/{orderId}")
    public ResponseEntity<Order> getOrderById(@PathVariable String orderId) {
        Order order = orderService.getOrderById(orderId);
        if (order == null) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok(order);
    }

    @GetMapping
    public ResponseEntity<List<Order>> getAllOrders() {
        List<Order> orders = orderService.getAllOrders();
        return ResponseEntity.ok(orders);
    }

    @DeleteMapping("/{orderId}")
    public ResponseEntity<Void> deleteOrder(@PathVariable String orderId) {
        orderService.deleteOrder(orderId);
        return ResponseEntity.noContent().build();
    }
}
